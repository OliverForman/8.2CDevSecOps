pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                echo "Tool: Git"
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/OliverForman/8.2CDevSecOps.git']]
                ])
            }
        }
        stage('Install Dependencies') {
            steps {
                echo "Tool: npm"
                bat 'npm install'
            }
        }
        stage('Run Tests') {
            steps {
                echo "Tool: Snyk"
                bat 'npm test > build.log 2>&1 || exit /b 0' // Allows pipeline to continue despite test failures
                script {
                    emailext body: "",
                        subject: "Stage: '${env.STAGE_NAME}' - ${currentBuild.currentResult}",
                        to: "oliverforman27@gmail.com",
                        attachmentsPattern: "build.log"
                }
            }
        }
        stage('Generate Coverage Report') {
            steps {
                echo "Tool: Jest"
                // Ensure coverage report exists
                bat 'npm run coverage || exit /b 0'
            }
        }
        stage('NPM Audit (Security Scan)') {
            steps {
                echo "Tool: npm audit"
                bat 'npm audit > build.log 2>&1  || exit /b 0' // This will show known CVEs in the output
                script {
                    emailext body: "",
                        subject: "Stage: '${env.STAGE_NAME}' - ${currentBuild.currentResult}",
                        to: "oliverforman27@gmail.com",
                        attachmentsPattern: "build.log"
                }
            }
        }
    }
}
